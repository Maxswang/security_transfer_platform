// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_rpc_2eproto__INCLUDED
#define PROTOBUF_rpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_2eproto();
void protobuf_AssignDesc_rpc_2eproto();
void protobuf_ShutdownFile_rpc_2eproto();

class Request;
class C2S_Ping;
class S2C_Ping;

// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string method = 1;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 1;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  inline void set_allocated_method(::std::string* method);

  // optional bytes serialized_request = 2;
  inline bool has_serialized_request() const;
  inline void clear_serialized_request();
  static const int kSerializedRequestFieldNumber = 2;
  inline const ::std::string& serialized_request() const;
  inline void set_serialized_request(const ::std::string& value);
  inline void set_serialized_request(const char* value);
  inline void set_serialized_request(const void* value, size_t size);
  inline ::std::string* mutable_serialized_request();
  inline ::std::string* release_serialized_request();
  inline void set_allocated_serialized_request(::std::string* serialized_request);

  // @@protoc_insertion_point(class_scope:rpc.Request)
 private:
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_serialized_request();
  inline void clear_has_serialized_request();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* method_;
  ::std::string* serialized_request_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class C2S_Ping : public ::google::protobuf::Message {
 public:
  C2S_Ping();
  virtual ~C2S_Ping();

  C2S_Ping(const C2S_Ping& from);

  inline C2S_Ping& operator=(const C2S_Ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_Ping& default_instance();

  void Swap(C2S_Ping* other);

  // implements Message ----------------------------------------------

  C2S_Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_Ping& from);
  void MergeFrom(const C2S_Ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rpc.C2S_Ping)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static C2S_Ping* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Ping : public ::google::protobuf::Message {
 public:
  S2C_Ping();
  virtual ~S2C_Ping();

  S2C_Ping(const S2C_Ping& from);

  inline S2C_Ping& operator=(const S2C_Ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Ping& default_instance();

  void Swap(S2C_Ping* other);

  // implements Message ----------------------------------------------

  S2C_Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Ping& from);
  void MergeFrom(const S2C_Ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rpc.S2C_Ping)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static S2C_Ping* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required string method = 1;
inline bool Request::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& Request::method() const {
  return *method_;
}
inline void Request::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Request::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Request::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* Request::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_method(::std::string* method) {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (method) {
    set_has_method();
    method_ = method;
  } else {
    clear_has_method();
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes serialized_request = 2;
inline bool Request::has_serialized_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_serialized_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_serialized_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_serialized_request() {
  if (serialized_request_ != &::google::protobuf::internal::kEmptyString) {
    serialized_request_->clear();
  }
  clear_has_serialized_request();
}
inline const ::std::string& Request::serialized_request() const {
  return *serialized_request_;
}
inline void Request::set_serialized_request(const ::std::string& value) {
  set_has_serialized_request();
  if (serialized_request_ == &::google::protobuf::internal::kEmptyString) {
    serialized_request_ = new ::std::string;
  }
  serialized_request_->assign(value);
}
inline void Request::set_serialized_request(const char* value) {
  set_has_serialized_request();
  if (serialized_request_ == &::google::protobuf::internal::kEmptyString) {
    serialized_request_ = new ::std::string;
  }
  serialized_request_->assign(value);
}
inline void Request::set_serialized_request(const void* value, size_t size) {
  set_has_serialized_request();
  if (serialized_request_ == &::google::protobuf::internal::kEmptyString) {
    serialized_request_ = new ::std::string;
  }
  serialized_request_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_serialized_request() {
  set_has_serialized_request();
  if (serialized_request_ == &::google::protobuf::internal::kEmptyString) {
    serialized_request_ = new ::std::string;
  }
  return serialized_request_;
}
inline ::std::string* Request::release_serialized_request() {
  clear_has_serialized_request();
  if (serialized_request_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialized_request_;
    serialized_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_serialized_request(::std::string* serialized_request) {
  if (serialized_request_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_request_;
  }
  if (serialized_request) {
    set_has_serialized_request();
    serialized_request_ = serialized_request;
  } else {
    clear_has_serialized_request();
    serialized_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// C2S_Ping

// -------------------------------------------------------------------

// S2C_Ping


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_2eproto__INCLUDED
