// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_rpc_2eproto__INCLUDED
#define PROTOBUF_rpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_2eproto();
void protobuf_AssignDesc_rpc_2eproto();
void protobuf_ShutdownFile_rpc_2eproto();

class Request;
class C2S_Ping;
class S2C_Ping;
class StpCryptoMsg;
class C2S_StpCryptoNegotiate;
class S2C_StpCryptoNegotiate;
class S2D_StpReportStatus;
class StpToken;

enum StpResult {
  SR_OK = 0,
  SR_NegotiateFailed = 1,
  SR_InvalidToken = 2,
  SR_TokenExpired = 3,
  SR_InvalidGuid = 4,
  SR_ReportStatusFailed = 5
};
bool StpResult_IsValid(int value);
const StpResult StpResult_MIN = SR_OK;
const StpResult StpResult_MAX = SR_ReportStatusFailed;
const int StpResult_ARRAYSIZE = StpResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* StpResult_descriptor();
inline const ::std::string& StpResult_Name(StpResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    StpResult_descriptor(), value);
}
inline bool StpResult_Parse(
    const ::std::string& name, StpResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StpResult>(
    StpResult_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string method = 1;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 1;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  inline void set_allocated_method(::std::string* method);

  // optional bytes serialized_request = 2;
  inline bool has_serialized_request() const;
  inline void clear_serialized_request();
  static const int kSerializedRequestFieldNumber = 2;
  inline const ::std::string& serialized_request() const;
  inline void set_serialized_request(const ::std::string& value);
  inline void set_serialized_request(const char* value);
  inline void set_serialized_request(const void* value, size_t size);
  inline ::std::string* mutable_serialized_request();
  inline ::std::string* release_serialized_request();
  inline void set_allocated_serialized_request(::std::string* serialized_request);

  // @@protoc_insertion_point(class_scope:rpc.Request)
 private:
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_serialized_request();
  inline void clear_has_serialized_request();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* method_;
  ::std::string* serialized_request_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class C2S_Ping : public ::google::protobuf::Message {
 public:
  C2S_Ping();
  virtual ~C2S_Ping();

  C2S_Ping(const C2S_Ping& from);

  inline C2S_Ping& operator=(const C2S_Ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_Ping& default_instance();

  void Swap(C2S_Ping* other);

  // implements Message ----------------------------------------------

  C2S_Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_Ping& from);
  void MergeFrom(const C2S_Ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rpc.C2S_Ping)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static C2S_Ping* default_instance_;
};
// -------------------------------------------------------------------

class S2C_Ping : public ::google::protobuf::Message {
 public:
  S2C_Ping();
  virtual ~S2C_Ping();

  S2C_Ping(const S2C_Ping& from);

  inline S2C_Ping& operator=(const S2C_Ping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_Ping& default_instance();

  void Swap(S2C_Ping* other);

  // implements Message ----------------------------------------------

  S2C_Ping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_Ping& from);
  void MergeFrom(const S2C_Ping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rpc.S2C_Ping)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static S2C_Ping* default_instance_;
};
// -------------------------------------------------------------------

class StpCryptoMsg : public ::google::protobuf::Message {
 public:
  StpCryptoMsg();
  virtual ~StpCryptoMsg();

  StpCryptoMsg(const StpCryptoMsg& from);

  inline StpCryptoMsg& operator=(const StpCryptoMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StpCryptoMsg& default_instance();

  void Swap(StpCryptoMsg* other);

  // implements Message ----------------------------------------------

  StpCryptoMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StpCryptoMsg& from);
  void MergeFrom(const StpCryptoMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rpc.StpToken token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::rpc::StpToken& token() const;
  inline ::rpc::StpToken* mutable_token();
  inline ::rpc::StpToken* release_token();
  inline void set_allocated_token(::rpc::StpToken* token);

  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:rpc.StpCryptoMsg)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rpc::StpToken* token_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static StpCryptoMsg* default_instance_;
};
// -------------------------------------------------------------------

class C2S_StpCryptoNegotiate : public ::google::protobuf::Message {
 public:
  C2S_StpCryptoNegotiate();
  virtual ~C2S_StpCryptoNegotiate();

  C2S_StpCryptoNegotiate(const C2S_StpCryptoNegotiate& from);

  inline C2S_StpCryptoNegotiate& operator=(const C2S_StpCryptoNegotiate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_StpCryptoNegotiate& default_instance();

  void Swap(C2S_StpCryptoNegotiate* other);

  // implements Message ----------------------------------------------

  C2S_StpCryptoNegotiate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_StpCryptoNegotiate& from);
  void MergeFrom(const C2S_StpCryptoNegotiate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 stp_guid = 1;
  inline bool has_stp_guid() const;
  inline void clear_stp_guid();
  static const int kStpGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 stp_guid() const;
  inline void set_stp_guid(::google::protobuf::uint64 value);

  // optional .rpc.StpToken token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::rpc::StpToken& token() const;
  inline ::rpc::StpToken* mutable_token();
  inline ::rpc::StpToken* release_token();
  inline void set_allocated_token(::rpc::StpToken* token);

  // @@protoc_insertion_point(class_scope:rpc.C2S_StpCryptoNegotiate)
 private:
  inline void set_has_stp_guid();
  inline void clear_has_stp_guid();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 stp_guid_;
  ::rpc::StpToken* token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static C2S_StpCryptoNegotiate* default_instance_;
};
// -------------------------------------------------------------------

class S2C_StpCryptoNegotiate : public ::google::protobuf::Message {
 public:
  S2C_StpCryptoNegotiate();
  virtual ~S2C_StpCryptoNegotiate();

  S2C_StpCryptoNegotiate(const S2C_StpCryptoNegotiate& from);

  inline S2C_StpCryptoNegotiate& operator=(const S2C_StpCryptoNegotiate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_StpCryptoNegotiate& default_instance();

  void Swap(S2C_StpCryptoNegotiate* other);

  // implements Message ----------------------------------------------

  S2C_StpCryptoNegotiate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_StpCryptoNegotiate& from);
  void MergeFrom(const S2C_StpCryptoNegotiate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .rpc.StpResult res = 1;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 1;
  inline ::rpc::StpResult res() const;
  inline void set_res(::rpc::StpResult value);

  // optional uint64 stp_guid = 2;
  inline bool has_stp_guid() const;
  inline void clear_stp_guid();
  static const int kStpGuidFieldNumber = 2;
  inline ::google::protobuf::uint64 stp_guid() const;
  inline void set_stp_guid(::google::protobuf::uint64 value);

  // optional .rpc.StpToken token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::rpc::StpToken& token() const;
  inline ::rpc::StpToken* mutable_token();
  inline ::rpc::StpToken* release_token();
  inline void set_allocated_token(::rpc::StpToken* token);

  // @@protoc_insertion_point(class_scope:rpc.S2C_StpCryptoNegotiate)
 private:
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_stp_guid();
  inline void clear_has_stp_guid();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 stp_guid_;
  ::rpc::StpToken* token_;
  int res_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static S2C_StpCryptoNegotiate* default_instance_;
};
// -------------------------------------------------------------------

class S2D_StpReportStatus : public ::google::protobuf::Message {
 public:
  S2D_StpReportStatus();
  virtual ~S2D_StpReportStatus();

  S2D_StpReportStatus(const S2D_StpReportStatus& from);

  inline S2D_StpReportStatus& operator=(const S2D_StpReportStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2D_StpReportStatus& default_instance();

  void Swap(S2D_StpReportStatus* other);

  // implements Message ----------------------------------------------

  S2D_StpReportStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2D_StpReportStatus& from);
  void MergeFrom(const S2D_StpReportStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 stp_guid = 1;
  inline bool has_stp_guid() const;
  inline void clear_stp_guid();
  static const int kStpGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 stp_guid() const;
  inline void set_stp_guid(::google::protobuf::uint64 value);

  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string expires = 3;
  inline bool has_expires() const;
  inline void clear_expires();
  static const int kExpiresFieldNumber = 3;
  inline const ::std::string& expires() const;
  inline void set_expires(const ::std::string& value);
  inline void set_expires(const char* value);
  inline void set_expires(const char* value, size_t size);
  inline ::std::string* mutable_expires();
  inline ::std::string* release_expires();
  inline void set_allocated_expires(::std::string* expires);

  // optional int32 group = 4;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 4;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // optional int32 idx = 5;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 5;
  inline ::google::protobuf::int32 idx() const;
  inline void set_idx(::google::protobuf::int32 value);

  // optional string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:rpc.S2D_StpReportStatus)
 private:
  inline void set_has_stp_guid();
  inline void clear_has_stp_guid();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_expires();
  inline void clear_has_expires();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 stp_guid_;
  ::std::string* key_;
  ::std::string* expires_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 idx_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static S2D_StpReportStatus* default_instance_;
};
// -------------------------------------------------------------------

class StpToken : public ::google::protobuf::Message {
 public:
  StpToken();
  virtual ~StpToken();

  StpToken(const StpToken& from);

  inline StpToken& operator=(const StpToken& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StpToken& default_instance();

  void Swap(StpToken* other);

  // implements Message ----------------------------------------------

  StpToken* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StpToken& from);
  void MergeFrom(const StpToken& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 stp_guid = 1;
  inline bool has_stp_guid() const;
  inline void clear_stp_guid();
  static const int kStpGuidFieldNumber = 1;
  inline ::google::protobuf::uint64 stp_guid() const;
  inline void set_stp_guid(::google::protobuf::uint64 value);

  // optional int32 group = 2;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 2;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // optional int32 idx = 3;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 3;
  inline ::google::protobuf::int32 idx() const;
  inline void set_idx(::google::protobuf::int32 value);

  // optional int64 expires = 4;
  inline bool has_expires() const;
  inline void clear_expires();
  static const int kExpiresFieldNumber = 4;
  inline ::google::protobuf::int64 expires() const;
  inline void set_expires(::google::protobuf::int64 value);

  // optional string key = 5;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 5;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:rpc.StpToken)
 private:
  inline void set_has_stp_guid();
  inline void clear_has_stp_guid();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_expires();
  inline void clear_has_expires();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 stp_guid_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 idx_;
  ::google::protobuf::int64 expires_;
  ::std::string* key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();

  void InitAsDefaultInstance();
  static StpToken* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required string method = 1;
inline bool Request::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& Request::method() const {
  return *method_;
}
inline void Request::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Request::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Request::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* Request::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_method(::std::string* method) {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (method) {
    set_has_method();
    method_ = method;
  } else {
    clear_has_method();
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes serialized_request = 2;
inline bool Request::has_serialized_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_serialized_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_serialized_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_serialized_request() {
  if (serialized_request_ != &::google::protobuf::internal::kEmptyString) {
    serialized_request_->clear();
  }
  clear_has_serialized_request();
}
inline const ::std::string& Request::serialized_request() const {
  return *serialized_request_;
}
inline void Request::set_serialized_request(const ::std::string& value) {
  set_has_serialized_request();
  if (serialized_request_ == &::google::protobuf::internal::kEmptyString) {
    serialized_request_ = new ::std::string;
  }
  serialized_request_->assign(value);
}
inline void Request::set_serialized_request(const char* value) {
  set_has_serialized_request();
  if (serialized_request_ == &::google::protobuf::internal::kEmptyString) {
    serialized_request_ = new ::std::string;
  }
  serialized_request_->assign(value);
}
inline void Request::set_serialized_request(const void* value, size_t size) {
  set_has_serialized_request();
  if (serialized_request_ == &::google::protobuf::internal::kEmptyString) {
    serialized_request_ = new ::std::string;
  }
  serialized_request_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_serialized_request() {
  set_has_serialized_request();
  if (serialized_request_ == &::google::protobuf::internal::kEmptyString) {
    serialized_request_ = new ::std::string;
  }
  return serialized_request_;
}
inline ::std::string* Request::release_serialized_request() {
  clear_has_serialized_request();
  if (serialized_request_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialized_request_;
    serialized_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_serialized_request(::std::string* serialized_request) {
  if (serialized_request_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_request_;
  }
  if (serialized_request) {
    set_has_serialized_request();
    serialized_request_ = serialized_request;
  } else {
    clear_has_serialized_request();
    serialized_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// C2S_Ping

// -------------------------------------------------------------------

// S2C_Ping

// -------------------------------------------------------------------

// StpCryptoMsg

// optional .rpc.StpToken token = 1;
inline bool StpCryptoMsg::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StpCryptoMsg::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StpCryptoMsg::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StpCryptoMsg::clear_token() {
  if (token_ != NULL) token_->::rpc::StpToken::Clear();
  clear_has_token();
}
inline const ::rpc::StpToken& StpCryptoMsg::token() const {
  return token_ != NULL ? *token_ : *default_instance_->token_;
}
inline ::rpc::StpToken* StpCryptoMsg::mutable_token() {
  set_has_token();
  if (token_ == NULL) token_ = new ::rpc::StpToken;
  return token_;
}
inline ::rpc::StpToken* StpCryptoMsg::release_token() {
  clear_has_token();
  ::rpc::StpToken* temp = token_;
  token_ = NULL;
  return temp;
}
inline void StpCryptoMsg::set_allocated_token(::rpc::StpToken* token) {
  delete token_;
  token_ = token;
  if (token) {
    set_has_token();
  } else {
    clear_has_token();
  }
}

// optional bytes data = 2;
inline bool StpCryptoMsg::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StpCryptoMsg::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StpCryptoMsg::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StpCryptoMsg::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& StpCryptoMsg::data() const {
  return *data_;
}
inline void StpCryptoMsg::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void StpCryptoMsg::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void StpCryptoMsg::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StpCryptoMsg::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* StpCryptoMsg::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StpCryptoMsg::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// C2S_StpCryptoNegotiate

// optional uint64 stp_guid = 1;
inline bool C2S_StpCryptoNegotiate::has_stp_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_StpCryptoNegotiate::set_has_stp_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_StpCryptoNegotiate::clear_has_stp_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_StpCryptoNegotiate::clear_stp_guid() {
  stp_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_stp_guid();
}
inline ::google::protobuf::uint64 C2S_StpCryptoNegotiate::stp_guid() const {
  return stp_guid_;
}
inline void C2S_StpCryptoNegotiate::set_stp_guid(::google::protobuf::uint64 value) {
  set_has_stp_guid();
  stp_guid_ = value;
}

// optional .rpc.StpToken token = 2;
inline bool C2S_StpCryptoNegotiate::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void C2S_StpCryptoNegotiate::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void C2S_StpCryptoNegotiate::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void C2S_StpCryptoNegotiate::clear_token() {
  if (token_ != NULL) token_->::rpc::StpToken::Clear();
  clear_has_token();
}
inline const ::rpc::StpToken& C2S_StpCryptoNegotiate::token() const {
  return token_ != NULL ? *token_ : *default_instance_->token_;
}
inline ::rpc::StpToken* C2S_StpCryptoNegotiate::mutable_token() {
  set_has_token();
  if (token_ == NULL) token_ = new ::rpc::StpToken;
  return token_;
}
inline ::rpc::StpToken* C2S_StpCryptoNegotiate::release_token() {
  clear_has_token();
  ::rpc::StpToken* temp = token_;
  token_ = NULL;
  return temp;
}
inline void C2S_StpCryptoNegotiate::set_allocated_token(::rpc::StpToken* token) {
  delete token_;
  token_ = token;
  if (token) {
    set_has_token();
  } else {
    clear_has_token();
  }
}

// -------------------------------------------------------------------

// S2C_StpCryptoNegotiate

// optional .rpc.StpResult res = 1;
inline bool S2C_StpCryptoNegotiate::has_res() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_StpCryptoNegotiate::set_has_res() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_StpCryptoNegotiate::clear_has_res() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_StpCryptoNegotiate::clear_res() {
  res_ = 0;
  clear_has_res();
}
inline ::rpc::StpResult S2C_StpCryptoNegotiate::res() const {
  return static_cast< ::rpc::StpResult >(res_);
}
inline void S2C_StpCryptoNegotiate::set_res(::rpc::StpResult value) {
  assert(::rpc::StpResult_IsValid(value));
  set_has_res();
  res_ = value;
}

// optional uint64 stp_guid = 2;
inline bool S2C_StpCryptoNegotiate::has_stp_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2C_StpCryptoNegotiate::set_has_stp_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2C_StpCryptoNegotiate::clear_has_stp_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2C_StpCryptoNegotiate::clear_stp_guid() {
  stp_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_stp_guid();
}
inline ::google::protobuf::uint64 S2C_StpCryptoNegotiate::stp_guid() const {
  return stp_guid_;
}
inline void S2C_StpCryptoNegotiate::set_stp_guid(::google::protobuf::uint64 value) {
  set_has_stp_guid();
  stp_guid_ = value;
}

// optional .rpc.StpToken token = 3;
inline bool S2C_StpCryptoNegotiate::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2C_StpCryptoNegotiate::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2C_StpCryptoNegotiate::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2C_StpCryptoNegotiate::clear_token() {
  if (token_ != NULL) token_->::rpc::StpToken::Clear();
  clear_has_token();
}
inline const ::rpc::StpToken& S2C_StpCryptoNegotiate::token() const {
  return token_ != NULL ? *token_ : *default_instance_->token_;
}
inline ::rpc::StpToken* S2C_StpCryptoNegotiate::mutable_token() {
  set_has_token();
  if (token_ == NULL) token_ = new ::rpc::StpToken;
  return token_;
}
inline ::rpc::StpToken* S2C_StpCryptoNegotiate::release_token() {
  clear_has_token();
  ::rpc::StpToken* temp = token_;
  token_ = NULL;
  return temp;
}
inline void S2C_StpCryptoNegotiate::set_allocated_token(::rpc::StpToken* token) {
  delete token_;
  token_ = token;
  if (token) {
    set_has_token();
  } else {
    clear_has_token();
  }
}

// -------------------------------------------------------------------

// S2D_StpReportStatus

// optional uint64 stp_guid = 1;
inline bool S2D_StpReportStatus::has_stp_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2D_StpReportStatus::set_has_stp_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2D_StpReportStatus::clear_has_stp_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2D_StpReportStatus::clear_stp_guid() {
  stp_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_stp_guid();
}
inline ::google::protobuf::uint64 S2D_StpReportStatus::stp_guid() const {
  return stp_guid_;
}
inline void S2D_StpReportStatus::set_stp_guid(::google::protobuf::uint64 value) {
  set_has_stp_guid();
  stp_guid_ = value;
}

// optional string key = 2;
inline bool S2D_StpReportStatus::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2D_StpReportStatus::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2D_StpReportStatus::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2D_StpReportStatus::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& S2D_StpReportStatus::key() const {
  return *key_;
}
inline void S2D_StpReportStatus::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void S2D_StpReportStatus::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void S2D_StpReportStatus::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2D_StpReportStatus::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* S2D_StpReportStatus::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2D_StpReportStatus::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string expires = 3;
inline bool S2D_StpReportStatus::has_expires() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2D_StpReportStatus::set_has_expires() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2D_StpReportStatus::clear_has_expires() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2D_StpReportStatus::clear_expires() {
  if (expires_ != &::google::protobuf::internal::kEmptyString) {
    expires_->clear();
  }
  clear_has_expires();
}
inline const ::std::string& S2D_StpReportStatus::expires() const {
  return *expires_;
}
inline void S2D_StpReportStatus::set_expires(const ::std::string& value) {
  set_has_expires();
  if (expires_ == &::google::protobuf::internal::kEmptyString) {
    expires_ = new ::std::string;
  }
  expires_->assign(value);
}
inline void S2D_StpReportStatus::set_expires(const char* value) {
  set_has_expires();
  if (expires_ == &::google::protobuf::internal::kEmptyString) {
    expires_ = new ::std::string;
  }
  expires_->assign(value);
}
inline void S2D_StpReportStatus::set_expires(const char* value, size_t size) {
  set_has_expires();
  if (expires_ == &::google::protobuf::internal::kEmptyString) {
    expires_ = new ::std::string;
  }
  expires_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2D_StpReportStatus::mutable_expires() {
  set_has_expires();
  if (expires_ == &::google::protobuf::internal::kEmptyString) {
    expires_ = new ::std::string;
  }
  return expires_;
}
inline ::std::string* S2D_StpReportStatus::release_expires() {
  clear_has_expires();
  if (expires_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = expires_;
    expires_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2D_StpReportStatus::set_allocated_expires(::std::string* expires) {
  if (expires_ != &::google::protobuf::internal::kEmptyString) {
    delete expires_;
  }
  if (expires) {
    set_has_expires();
    expires_ = expires;
  } else {
    clear_has_expires();
    expires_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 group = 4;
inline bool S2D_StpReportStatus::has_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2D_StpReportStatus::set_has_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2D_StpReportStatus::clear_has_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2D_StpReportStatus::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 S2D_StpReportStatus::group() const {
  return group_;
}
inline void S2D_StpReportStatus::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional int32 idx = 5;
inline bool S2D_StpReportStatus::has_idx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2D_StpReportStatus::set_has_idx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2D_StpReportStatus::clear_has_idx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2D_StpReportStatus::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
inline ::google::protobuf::int32 S2D_StpReportStatus::idx() const {
  return idx_;
}
inline void S2D_StpReportStatus::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
}

// optional string ip = 6;
inline bool S2D_StpReportStatus::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2D_StpReportStatus::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2D_StpReportStatus::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2D_StpReportStatus::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2D_StpReportStatus::ip() const {
  return *ip_;
}
inline void S2D_StpReportStatus::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2D_StpReportStatus::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2D_StpReportStatus::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2D_StpReportStatus::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2D_StpReportStatus::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2D_StpReportStatus::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// StpToken

// optional uint64 stp_guid = 1;
inline bool StpToken::has_stp_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StpToken::set_has_stp_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StpToken::clear_has_stp_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StpToken::clear_stp_guid() {
  stp_guid_ = GOOGLE_ULONGLONG(0);
  clear_has_stp_guid();
}
inline ::google::protobuf::uint64 StpToken::stp_guid() const {
  return stp_guid_;
}
inline void StpToken::set_stp_guid(::google::protobuf::uint64 value) {
  set_has_stp_guid();
  stp_guid_ = value;
}

// optional int32 group = 2;
inline bool StpToken::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StpToken::set_has_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StpToken::clear_has_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StpToken::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 StpToken::group() const {
  return group_;
}
inline void StpToken::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional int32 idx = 3;
inline bool StpToken::has_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StpToken::set_has_idx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StpToken::clear_has_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StpToken::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
inline ::google::protobuf::int32 StpToken::idx() const {
  return idx_;
}
inline void StpToken::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
}

// optional int64 expires = 4;
inline bool StpToken::has_expires() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StpToken::set_has_expires() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StpToken::clear_has_expires() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StpToken::clear_expires() {
  expires_ = GOOGLE_LONGLONG(0);
  clear_has_expires();
}
inline ::google::protobuf::int64 StpToken::expires() const {
  return expires_;
}
inline void StpToken::set_expires(::google::protobuf::int64 value) {
  set_has_expires();
  expires_ = value;
}

// optional string key = 5;
inline bool StpToken::has_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StpToken::set_has_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StpToken::clear_has_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StpToken::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& StpToken::key() const {
  return *key_;
}
inline void StpToken::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void StpToken::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void StpToken::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StpToken::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* StpToken::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StpToken::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::StpResult>() {
  return ::rpc::StpResult_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_2eproto__INCLUDED
