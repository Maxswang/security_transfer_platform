// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* StpCryptoMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StpCryptoMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2S_StpCryptoNegotiate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_StpCryptoNegotiate_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_StpCryptoNegotiate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_StpCryptoNegotiate_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2D_StpReportStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2D_StpReportStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* StpToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StpToken_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StpResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpc_2eproto() {
  protobuf_AddDesc_rpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, serialized_request_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  C2S_Ping_descriptor_ = file->message_type(1);
  static const int C2S_Ping_offsets_[1] = {
  };
  C2S_Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_Ping_descriptor_,
      C2S_Ping::default_instance_,
      C2S_Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_Ping));
  S2C_Ping_descriptor_ = file->message_type(2);
  static const int S2C_Ping_offsets_[1] = {
  };
  S2C_Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_Ping_descriptor_,
      S2C_Ping::default_instance_,
      S2C_Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_Ping));
  StpCryptoMsg_descriptor_ = file->message_type(3);
  static const int StpCryptoMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpCryptoMsg, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpCryptoMsg, data_),
  };
  StpCryptoMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StpCryptoMsg_descriptor_,
      StpCryptoMsg::default_instance_,
      StpCryptoMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpCryptoMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpCryptoMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StpCryptoMsg));
  C2S_StpCryptoNegotiate_descriptor_ = file->message_type(4);
  static const int C2S_StpCryptoNegotiate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_StpCryptoNegotiate, stp_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_StpCryptoNegotiate, token_),
  };
  C2S_StpCryptoNegotiate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2S_StpCryptoNegotiate_descriptor_,
      C2S_StpCryptoNegotiate::default_instance_,
      C2S_StpCryptoNegotiate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_StpCryptoNegotiate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_StpCryptoNegotiate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2S_StpCryptoNegotiate));
  S2C_StpCryptoNegotiate_descriptor_ = file->message_type(5);
  static const int S2C_StpCryptoNegotiate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_StpCryptoNegotiate, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_StpCryptoNegotiate, stp_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_StpCryptoNegotiate, token_),
  };
  S2C_StpCryptoNegotiate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2C_StpCryptoNegotiate_descriptor_,
      S2C_StpCryptoNegotiate::default_instance_,
      S2C_StpCryptoNegotiate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_StpCryptoNegotiate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_StpCryptoNegotiate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2C_StpCryptoNegotiate));
  S2D_StpReportStatus_descriptor_ = file->message_type(6);
  static const int S2D_StpReportStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2D_StpReportStatus, stp_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2D_StpReportStatus, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2D_StpReportStatus, expires_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2D_StpReportStatus, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2D_StpReportStatus, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2D_StpReportStatus, ip_),
  };
  S2D_StpReportStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2D_StpReportStatus_descriptor_,
      S2D_StpReportStatus::default_instance_,
      S2D_StpReportStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2D_StpReportStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2D_StpReportStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2D_StpReportStatus));
  StpToken_descriptor_ = file->message_type(7);
  static const int StpToken_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpToken, stp_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpToken, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpToken, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpToken, expires_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpToken, key_),
  };
  StpToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StpToken_descriptor_,
      StpToken::default_instance_,
      StpToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StpToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StpToken));
  StpResult_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_Ping_descriptor_, &C2S_Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_Ping_descriptor_, &S2C_Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StpCryptoMsg_descriptor_, &StpCryptoMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2S_StpCryptoNegotiate_descriptor_, &C2S_StpCryptoNegotiate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2C_StpCryptoNegotiate_descriptor_, &S2C_StpCryptoNegotiate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2D_StpReportStatus_descriptor_, &S2D_StpReportStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StpToken_descriptor_, &StpToken::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete C2S_Ping::default_instance_;
  delete C2S_Ping_reflection_;
  delete S2C_Ping::default_instance_;
  delete S2C_Ping_reflection_;
  delete StpCryptoMsg::default_instance_;
  delete StpCryptoMsg_reflection_;
  delete C2S_StpCryptoNegotiate::default_instance_;
  delete C2S_StpCryptoNegotiate_reflection_;
  delete S2C_StpCryptoNegotiate::default_instance_;
  delete S2C_StpCryptoNegotiate_reflection_;
  delete S2D_StpReportStatus::default_instance_;
  delete S2D_StpReportStatus_reflection_;
  delete StpToken::default_instance_;
  delete StpToken_reflection_;
}

void protobuf_AddDesc_rpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\trpc.proto\022\003rpc\"5\n\007Request\022\016\n\006method\030\001 "
    "\002(\t\022\032\n\022serialized_request\030\002 \001(\014\"\n\n\010C2S_P"
    "ing\"\n\n\010S2C_Ping\":\n\014StpCryptoMsg\022\034\n\005token"
    "\030\001 \001(\0132\r.rpc.StpToken\022\014\n\004data\030\002 \001(\014\"H\n\026C"
    "2S_StpCryptoNegotiate\022\020\n\010stp_guid\030\001 \001(\004\022"
    "\034\n\005token\030\002 \001(\0132\r.rpc.StpToken\"e\n\026S2C_Stp"
    "CryptoNegotiate\022\033\n\003res\030\001 \001(\0162\016.rpc.StpRe"
    "sult\022\020\n\010stp_guid\030\002 \001(\004\022\034\n\005token\030\003 \001(\0132\r."
    "rpc.StpToken\"m\n\023S2D_StpReportStatus\022\020\n\010s"
    "tp_guid\030\001 \001(\004\022\013\n\003key\030\002 \001(\t\022\017\n\007expires\030\003 "
    "\001(\t\022\r\n\005group\030\004 \001(\005\022\013\n\003idx\030\005 \001(\005\022\n\n\002ip\030\006 "
    "\001(\t\"V\n\010StpToken\022\020\n\010stp_guid\030\001 \001(\004\022\r\n\005gro"
    "up\030\002 \001(\005\022\013\n\003idx\030\003 \001(\005\022\017\n\007expires\030\004 \001(\003\022\013"
    "\n\003key\030\005 \001(\t*\207\001\n\tStpResult\022\t\n\005SR_OK\020\000\022\026\n\022"
    "SR_NegotiateFailed\020\001\022\023\n\017SR_InvalidToken\020"
    "\002\022\023\n\017SR_TokenExpired\020\003\022\022\n\016SR_InvalidGuid"
    "\020\004\022\031\n\025SR_ReportStatusFailed\020\005", 669);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  C2S_Ping::default_instance_ = new C2S_Ping();
  S2C_Ping::default_instance_ = new S2C_Ping();
  StpCryptoMsg::default_instance_ = new StpCryptoMsg();
  C2S_StpCryptoNegotiate::default_instance_ = new C2S_StpCryptoNegotiate();
  S2C_StpCryptoNegotiate::default_instance_ = new S2C_StpCryptoNegotiate();
  S2D_StpReportStatus::default_instance_ = new S2D_StpReportStatus();
  StpToken::default_instance_ = new StpToken();
  Request::default_instance_->InitAsDefaultInstance();
  C2S_Ping::default_instance_->InitAsDefaultInstance();
  S2C_Ping::default_instance_->InitAsDefaultInstance();
  StpCryptoMsg::default_instance_->InitAsDefaultInstance();
  C2S_StpCryptoNegotiate::default_instance_->InitAsDefaultInstance();
  S2C_StpCryptoNegotiate::default_instance_->InitAsDefaultInstance();
  S2D_StpReportStatus::default_instance_->InitAsDefaultInstance();
  StpToken::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_2eproto {
  StaticDescriptorInitializer_rpc_2eproto() {
    protobuf_AddDesc_rpc_2eproto();
  }
} static_descriptor_initializer_rpc_2eproto_;
const ::google::protobuf::EnumDescriptor* StpResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StpResult_descriptor_;
}
bool StpResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kMethodFieldNumber;
const int Request::kSerializedRequestFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialized_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (serialized_request_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_request_;
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::kEmptyString) {
        method_->clear();
      }
    }
    if (has_serialized_request()) {
      if (serialized_request_ != &::google::protobuf::internal::kEmptyString) {
        serialized_request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string method = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serialized_request;
        break;
      }

      // optional bytes serialized_request = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialized_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->method(), output);
  }

  // optional bytes serialized_request = 2;
  if (has_serialized_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->serialized_request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->method(), target);
  }

  // optional bytes serialized_request = 2;
  if (has_serialized_request()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->serialized_request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string method = 1;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

    // optional bytes serialized_request = 2;
    if (has_serialized_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_serialized_request()) {
      set_serialized_request(from.serialized_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(method_, other->method_);
    std::swap(serialized_request_, other->serialized_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2S_Ping::C2S_Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_Ping::InitAsDefaultInstance() {
}

C2S_Ping::C2S_Ping(const C2S_Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_Ping::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_Ping::~C2S_Ping() {
  SharedDtor();
}

void C2S_Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_Ping_descriptor_;
}

const C2S_Ping& C2S_Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

C2S_Ping* C2S_Ping::default_instance_ = NULL;

C2S_Ping* C2S_Ping::New() const {
  return new C2S_Ping;
}

void C2S_Ping::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2S_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_Ping::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_Ping::MergeFrom(const C2S_Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_Ping::CopyFrom(const C2S_Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Ping::IsInitialized() const {

  return true;
}

void C2S_Ping::Swap(C2S_Ping* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_Ping_descriptor_;
  metadata.reflection = C2S_Ping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

S2C_Ping::S2C_Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_Ping::InitAsDefaultInstance() {
}

S2C_Ping::S2C_Ping(const S2C_Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_Ping::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_Ping::~S2C_Ping() {
  SharedDtor();
}

void S2C_Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_Ping_descriptor_;
}

const S2C_Ping& S2C_Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

S2C_Ping* S2C_Ping::default_instance_ = NULL;

S2C_Ping* S2C_Ping::New() const {
  return new S2C_Ping;
}

void S2C_Ping::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void S2C_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_Ping::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_Ping::MergeFrom(const S2C_Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_Ping::CopyFrom(const S2C_Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Ping::IsInitialized() const {

  return true;
}

void S2C_Ping::Swap(S2C_Ping* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_Ping_descriptor_;
  metadata.reflection = S2C_Ping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StpCryptoMsg::kTokenFieldNumber;
const int StpCryptoMsg::kDataFieldNumber;
#endif  // !_MSC_VER

StpCryptoMsg::StpCryptoMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StpCryptoMsg::InitAsDefaultInstance() {
  token_ = const_cast< ::rpc::StpToken*>(&::rpc::StpToken::default_instance());
}

StpCryptoMsg::StpCryptoMsg(const StpCryptoMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StpCryptoMsg::SharedCtor() {
  _cached_size_ = 0;
  token_ = NULL;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StpCryptoMsg::~StpCryptoMsg() {
  SharedDtor();
}

void StpCryptoMsg::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
    delete token_;
  }
}

void StpCryptoMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StpCryptoMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StpCryptoMsg_descriptor_;
}

const StpCryptoMsg& StpCryptoMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

StpCryptoMsg* StpCryptoMsg::default_instance_ = NULL;

StpCryptoMsg* StpCryptoMsg::New() const {
  return new StpCryptoMsg;
}

void StpCryptoMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != NULL) token_->::rpc::StpToken::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StpCryptoMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpc.StpToken token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StpCryptoMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rpc.StpToken token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->token(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StpCryptoMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rpc.StpToken token = 1;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->token(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StpCryptoMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rpc.StpToken token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->token());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StpCryptoMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StpCryptoMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StpCryptoMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StpCryptoMsg::MergeFrom(const StpCryptoMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      mutable_token()->::rpc::StpToken::MergeFrom(from.token());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StpCryptoMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StpCryptoMsg::CopyFrom(const StpCryptoMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StpCryptoMsg::IsInitialized() const {

  return true;
}

void StpCryptoMsg::Swap(StpCryptoMsg* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StpCryptoMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StpCryptoMsg_descriptor_;
  metadata.reflection = StpCryptoMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2S_StpCryptoNegotiate::kStpGuidFieldNumber;
const int C2S_StpCryptoNegotiate::kTokenFieldNumber;
#endif  // !_MSC_VER

C2S_StpCryptoNegotiate::C2S_StpCryptoNegotiate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2S_StpCryptoNegotiate::InitAsDefaultInstance() {
  token_ = const_cast< ::rpc::StpToken*>(&::rpc::StpToken::default_instance());
}

C2S_StpCryptoNegotiate::C2S_StpCryptoNegotiate(const C2S_StpCryptoNegotiate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2S_StpCryptoNegotiate::SharedCtor() {
  _cached_size_ = 0;
  stp_guid_ = GOOGLE_ULONGLONG(0);
  token_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_StpCryptoNegotiate::~C2S_StpCryptoNegotiate() {
  SharedDtor();
}

void C2S_StpCryptoNegotiate::SharedDtor() {
  if (this != default_instance_) {
    delete token_;
  }
}

void C2S_StpCryptoNegotiate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_StpCryptoNegotiate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_StpCryptoNegotiate_descriptor_;
}

const C2S_StpCryptoNegotiate& C2S_StpCryptoNegotiate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

C2S_StpCryptoNegotiate* C2S_StpCryptoNegotiate::default_instance_ = NULL;

C2S_StpCryptoNegotiate* C2S_StpCryptoNegotiate::New() const {
  return new C2S_StpCryptoNegotiate;
}

void C2S_StpCryptoNegotiate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stp_guid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != NULL) token_->::rpc::StpToken::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2S_StpCryptoNegotiate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 stp_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stp_guid_)));
          set_has_stp_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional .rpc.StpToken token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2S_StpCryptoNegotiate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 stp_guid = 1;
  if (has_stp_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stp_guid(), output);
  }

  // optional .rpc.StpToken token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2S_StpCryptoNegotiate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 stp_guid = 1;
  if (has_stp_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stp_guid(), target);
  }

  // optional .rpc.StpToken token = 2;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2S_StpCryptoNegotiate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 stp_guid = 1;
    if (has_stp_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stp_guid());
    }

    // optional .rpc.StpToken token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_StpCryptoNegotiate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2S_StpCryptoNegotiate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2S_StpCryptoNegotiate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2S_StpCryptoNegotiate::MergeFrom(const C2S_StpCryptoNegotiate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stp_guid()) {
      set_stp_guid(from.stp_guid());
    }
    if (from.has_token()) {
      mutable_token()->::rpc::StpToken::MergeFrom(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2S_StpCryptoNegotiate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_StpCryptoNegotiate::CopyFrom(const C2S_StpCryptoNegotiate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_StpCryptoNegotiate::IsInitialized() const {

  return true;
}

void C2S_StpCryptoNegotiate::Swap(C2S_StpCryptoNegotiate* other) {
  if (other != this) {
    std::swap(stp_guid_, other->stp_guid_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2S_StpCryptoNegotiate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_StpCryptoNegotiate_descriptor_;
  metadata.reflection = C2S_StpCryptoNegotiate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2C_StpCryptoNegotiate::kResFieldNumber;
const int S2C_StpCryptoNegotiate::kStpGuidFieldNumber;
const int S2C_StpCryptoNegotiate::kTokenFieldNumber;
#endif  // !_MSC_VER

S2C_StpCryptoNegotiate::S2C_StpCryptoNegotiate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2C_StpCryptoNegotiate::InitAsDefaultInstance() {
  token_ = const_cast< ::rpc::StpToken*>(&::rpc::StpToken::default_instance());
}

S2C_StpCryptoNegotiate::S2C_StpCryptoNegotiate(const S2C_StpCryptoNegotiate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2C_StpCryptoNegotiate::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  stp_guid_ = GOOGLE_ULONGLONG(0);
  token_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_StpCryptoNegotiate::~S2C_StpCryptoNegotiate() {
  SharedDtor();
}

void S2C_StpCryptoNegotiate::SharedDtor() {
  if (this != default_instance_) {
    delete token_;
  }
}

void S2C_StpCryptoNegotiate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_StpCryptoNegotiate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_StpCryptoNegotiate_descriptor_;
}

const S2C_StpCryptoNegotiate& S2C_StpCryptoNegotiate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

S2C_StpCryptoNegotiate* S2C_StpCryptoNegotiate::default_instance_ = NULL;

S2C_StpCryptoNegotiate* S2C_StpCryptoNegotiate::New() const {
  return new S2C_StpCryptoNegotiate;
}

void S2C_StpCryptoNegotiate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
    stp_guid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != NULL) token_->::rpc::StpToken::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2C_StpCryptoNegotiate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rpc.StpResult res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::rpc::StpResult_IsValid(value)) {
            set_res(static_cast< ::rpc::StpResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stp_guid;
        break;
      }

      // optional uint64 stp_guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stp_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stp_guid_)));
          set_has_stp_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional .rpc.StpToken token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2C_StpCryptoNegotiate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .rpc.StpResult res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->res(), output);
  }

  // optional uint64 stp_guid = 2;
  if (has_stp_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stp_guid(), output);
  }

  // optional .rpc.StpToken token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2C_StpCryptoNegotiate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .rpc.StpResult res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->res(), target);
  }

  // optional uint64 stp_guid = 2;
  if (has_stp_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stp_guid(), target);
  }

  // optional .rpc.StpToken token = 3;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2C_StpCryptoNegotiate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .rpc.StpResult res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

    // optional uint64 stp_guid = 2;
    if (has_stp_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stp_guid());
    }

    // optional .rpc.StpToken token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_StpCryptoNegotiate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2C_StpCryptoNegotiate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2C_StpCryptoNegotiate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2C_StpCryptoNegotiate::MergeFrom(const S2C_StpCryptoNegotiate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_stp_guid()) {
      set_stp_guid(from.stp_guid());
    }
    if (from.has_token()) {
      mutable_token()->::rpc::StpToken::MergeFrom(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2C_StpCryptoNegotiate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_StpCryptoNegotiate::CopyFrom(const S2C_StpCryptoNegotiate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_StpCryptoNegotiate::IsInitialized() const {

  return true;
}

void S2C_StpCryptoNegotiate::Swap(S2C_StpCryptoNegotiate* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(stp_guid_, other->stp_guid_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2C_StpCryptoNegotiate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_StpCryptoNegotiate_descriptor_;
  metadata.reflection = S2C_StpCryptoNegotiate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2D_StpReportStatus::kStpGuidFieldNumber;
const int S2D_StpReportStatus::kKeyFieldNumber;
const int S2D_StpReportStatus::kExpiresFieldNumber;
const int S2D_StpReportStatus::kGroupFieldNumber;
const int S2D_StpReportStatus::kIdxFieldNumber;
const int S2D_StpReportStatus::kIpFieldNumber;
#endif  // !_MSC_VER

S2D_StpReportStatus::S2D_StpReportStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2D_StpReportStatus::InitAsDefaultInstance() {
}

S2D_StpReportStatus::S2D_StpReportStatus(const S2D_StpReportStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2D_StpReportStatus::SharedCtor() {
  _cached_size_ = 0;
  stp_guid_ = GOOGLE_ULONGLONG(0);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expires_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_ = 0;
  idx_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2D_StpReportStatus::~S2D_StpReportStatus() {
  SharedDtor();
}

void S2D_StpReportStatus::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (expires_ != &::google::protobuf::internal::kEmptyString) {
    delete expires_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void S2D_StpReportStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2D_StpReportStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2D_StpReportStatus_descriptor_;
}

const S2D_StpReportStatus& S2D_StpReportStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

S2D_StpReportStatus* S2D_StpReportStatus::default_instance_ = NULL;

S2D_StpReportStatus* S2D_StpReportStatus::New() const {
  return new S2D_StpReportStatus;
}

void S2D_StpReportStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stp_guid_ = GOOGLE_ULONGLONG(0);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_expires()) {
      if (expires_ != &::google::protobuf::internal::kEmptyString) {
        expires_->clear();
      }
    }
    group_ = 0;
    idx_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2D_StpReportStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 stp_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stp_guid_)));
          set_has_stp_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_expires;
        break;
      }

      // optional string expires = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expires:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expires()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->expires().data(), this->expires().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_group;
        break;
      }

      // optional int32 group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_idx;
        break;
      }

      // optional int32 idx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // optional string ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2D_StpReportStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 stp_guid = 1;
  if (has_stp_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stp_guid(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // optional string expires = 3;
  if (has_expires()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expires().data(), this->expires().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->expires(), output);
  }

  // optional int32 group = 4;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->group(), output);
  }

  // optional int32 idx = 5;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->idx(), output);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2D_StpReportStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 stp_guid = 1;
  if (has_stp_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stp_guid(), target);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional string expires = 3;
  if (has_expires()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expires().data(), this->expires().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->expires(), target);
  }

  // optional int32 group = 4;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->group(), target);
  }

  // optional int32 idx = 5;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->idx(), target);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2D_StpReportStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 stp_guid = 1;
    if (has_stp_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stp_guid());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string expires = 3;
    if (has_expires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->expires());
    }

    // optional int32 group = 4;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int32 idx = 5;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // optional string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2D_StpReportStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2D_StpReportStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2D_StpReportStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2D_StpReportStatus::MergeFrom(const S2D_StpReportStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stp_guid()) {
      set_stp_guid(from.stp_guid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_expires()) {
      set_expires(from.expires());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2D_StpReportStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2D_StpReportStatus::CopyFrom(const S2D_StpReportStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2D_StpReportStatus::IsInitialized() const {

  return true;
}

void S2D_StpReportStatus::Swap(S2D_StpReportStatus* other) {
  if (other != this) {
    std::swap(stp_guid_, other->stp_guid_);
    std::swap(key_, other->key_);
    std::swap(expires_, other->expires_);
    std::swap(group_, other->group_);
    std::swap(idx_, other->idx_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2D_StpReportStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2D_StpReportStatus_descriptor_;
  metadata.reflection = S2D_StpReportStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StpToken::kStpGuidFieldNumber;
const int StpToken::kGroupFieldNumber;
const int StpToken::kIdxFieldNumber;
const int StpToken::kExpiresFieldNumber;
const int StpToken::kKeyFieldNumber;
#endif  // !_MSC_VER

StpToken::StpToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StpToken::InitAsDefaultInstance() {
}

StpToken::StpToken(const StpToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StpToken::SharedCtor() {
  _cached_size_ = 0;
  stp_guid_ = GOOGLE_ULONGLONG(0);
  group_ = 0;
  idx_ = 0;
  expires_ = GOOGLE_LONGLONG(0);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StpToken::~StpToken() {
  SharedDtor();
}

void StpToken::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void StpToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StpToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StpToken_descriptor_;
}

const StpToken& StpToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();
  return *default_instance_;
}

StpToken* StpToken::default_instance_ = NULL;

StpToken* StpToken::New() const {
  return new StpToken;
}

void StpToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stp_guid_ = GOOGLE_ULONGLONG(0);
    group_ = 0;
    idx_ = 0;
    expires_ = GOOGLE_LONGLONG(0);
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StpToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 stp_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stp_guid_)));
          set_has_stp_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }

      // optional int32 group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_idx;
        break;
      }

      // optional int32 idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expires;
        break;
      }

      // optional int64 expires = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expires:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expires_)));
          set_has_expires();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_key;
        break;
      }

      // optional string key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StpToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 stp_guid = 1;
  if (has_stp_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stp_guid(), output);
  }

  // optional int32 group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group(), output);
  }

  // optional int32 idx = 3;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->idx(), output);
  }

  // optional int64 expires = 4;
  if (has_expires()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expires(), output);
  }

  // optional string key = 5;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StpToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 stp_guid = 1;
  if (has_stp_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stp_guid(), target);
  }

  // optional int32 group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group(), target);
  }

  // optional int32 idx = 3;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->idx(), target);
  }

  // optional int64 expires = 4;
  if (has_expires()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expires(), target);
  }

  // optional string key = 5;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StpToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 stp_guid = 1;
    if (has_stp_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stp_guid());
    }

    // optional int32 group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int32 idx = 3;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // optional int64 expires = 4;
    if (has_expires()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expires());
    }

    // optional string key = 5;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StpToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StpToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StpToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StpToken::MergeFrom(const StpToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stp_guid()) {
      set_stp_guid(from.stp_guid());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_expires()) {
      set_expires(from.expires());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StpToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StpToken::CopyFrom(const StpToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StpToken::IsInitialized() const {

  return true;
}

void StpToken::Swap(StpToken* other) {
  if (other != this) {
    std::swap(stp_guid_, other->stp_guid_);
    std::swap(group_, other->group_);
    std::swap(idx_, other->idx_);
    std::swap(expires_, other->expires_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StpToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StpToken_descriptor_;
  metadata.reflection = StpToken_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
